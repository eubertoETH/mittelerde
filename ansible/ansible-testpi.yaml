- name: Basic Setup and Container Deployment on Raspberry Pi
  hosts: raspberrypi
  become: true
  vars:
    compose_files:
      - { src: "/Users/euberto/Desktop/mittelerde/Compose/docker-compose.paperless.yml", dest: "/home/euberto/containers/paperless/docker-compose.yml" }
      - { src: "/Users/euberto/Desktop/mittelerde/Compose/docker-compose.portainer.yml", dest: "/home/euberto/containers/portainer/docker-compose.yml" }
      - { src: "/Users/euberto/Desktop/mittelerde/Compose/docker-compose.homer.yml", dest: "/home/euberto/containers/homer/docker-compose.yml" }
      - { src: "/Users/euberto/Desktop/mittelerde/Compose/docker-compose.hass.yml", dest: "/home/euberto/containers/hass/docker-compose.yml" }
      - { src: "/Users/euberto/Desktop/mittelerde/Compose/docker-compose.keycloak.yml", dest: "/home/euberto/containers/keycloak/docker-compose.yml" }
    container_paths:
      paperless:
        path: /home/euberto/containers/paperless
        folders:
          - consume
          - data
          - media
          - pgdata
          - redisdata
      homer:
        path: /home/euberto/containers/homer
        folders:
          - config
      portainer:
        path: /home/euberto/containers/portainer
        folders: []
      hass:
        path: /home/euberto/containers/hass
        folders: []
      keycloak:
        path: /home/euberto/containers/keycloak
        folders:
          - postgresql_data
          - keycloak_data

  tasks:
    - name: Ensure main container directories exist
      ansible.builtin.file:
        path: "{{ item.value.path }}"
        state: directory
        mode: '0755'
        owner: euberto  # Ensure the correct owner
        group: euberto  # Ensure the correct group
      with_items: "{{ container_paths | dict2items }}"    

    - name: Ensure necessary subfolders exist for each container
      ansible.builtin.file:
        path: "{{ item.0.value.path }}/{{ item.1 }}"
        state: directory
        mode: '0755'
        owner: euberto  # Ensure the correct owner
        group: euberto  # Ensure the correct group
      with_subelements:
        - "{{ container_paths | dict2items }}"
        - value.folders

    - name: Copy Docker Compose files to Raspberry Pi
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0755'
        owner: euberto  # Ensure the correct owner
        group: euberto  # Ensure the correct group
      with_items: "{{ compose_files }}"

    - name: Run Docker Compose for each container
      ansible.builtin.command:
        cmd: docker-compose up -d
      args:
        chdir: "{{ item.value.path }}"
      with_items: "{{ container_paths | dict2items }}"
      changed_when: false  # Command does not modify if containers are already up

    - name: Copy Homer config file to Raspberry Pi
      copy:
        src: "/Users/euberto/Desktop/mittelerde/homer/config.yml"
        dest: "/home/euberto/containers/homer/config.yml"
        remote_src: no
        mode: '0755'
        owner: euberto  # Ensure the correct owner
        group: euberto  # Ensure the correct group  

- name: Test if services are accessible
  hosts: raspberrypi
  tasks:
  
    - name: Check Homer service
      ansible.builtin.uri:
        url: "http://localhost:8092"
        return_content: yes
      register: homer_response

    - name: Debug Homer response
      debug:
        msg: "Homer response: {{ homer_response.status }}"
      when: homer_response is defined

    - name: Check Home Assistant service
      ansible.builtin.uri:
        url: "http://localhost:8123"
        return_content: yes
      register: hass_response

    - name: Debug Home Assistant response
      debug:
        msg: "Home Assistant response: {{ hass_response.status }}"
      when: hass_response is defined

    - name: Check Portainer service
      ansible.builtin.uri:
        url: "https://localhost:9450"
        validate_certs: no  # Disable SSL certificate verification
        return_content: yes
      register: portainer_response

    - name: Debug Portainer response
      debug:
        msg: "Portainer response: {{ portainer_response.status }}"
      when: portainer_response is defined

    - name: Check Keycloak service
      ansible.builtin.uri:
        url: "http://localhost:8080"
        return_content: yes
      register: keycloak_response

    - name: Debug Keycloak response
      debug:
        msg: "Keycloak response: {{ keycloak_response.status }}"
      when: keycloak_response is defined
    
    - name: Check Paperless service
      ansible.builtin.uri:
        url: "http://localhost:8020"
        return_content: yes
      register: paperless_response
    
    - name: Debug Paperless response
      debug:
        msg: "Paperless response: {{ paperless_response.status }}"
      when: paperless_response is defined